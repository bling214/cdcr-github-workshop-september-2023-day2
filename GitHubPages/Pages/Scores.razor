@inject NavigationManager NavigationManager
@inject ILocalStorageService LocalStorage

@page "/scores"

<SfCard ID="BasicCard">
    <CardHeader Title="Scores" />
    <CardContent>
        @if (categoryScores.Any())
        {
            <div class="col-lg-12 control-section">
                <div class="content-wrapper">
                    <div class="row">
                        <div id="container">
                            <SfGrid DataSource="@categoryScores" EnableHeaderFocus="true" AllowSelection="true" AllowSorting="true" AllowFiltering="true" EnableVirtualization="true" EnableVirtualMaskRow="true" EnableHover="true" Height="600" RowHeight="38">
                                <GridFilterSettings Type="FilterType.Menu"></GridFilterSettings>
                                <GridPageSettings PageSize="20"></GridPageSettings>
                                <GridAggregates>
                                    <GridAggregate>
                                        <GridAggregateColumns>
                                            <GridAggregateColumn Field="@nameof(Score.Correct)" Type="AggregateType.Sum">
                                                <FooterTemplate>
                                                    @{ AggregateTemplateContext? SumValue = (context as AggregateTemplateContext);
                                                    <div>
                                                        Correct: @SumValue.Sum
                                                    </div>
                                                    }
                                                </FooterTemplate>
                                            </GridAggregateColumn>
                                            <GridAggregateColumn Field="@nameof(Score.Total)" Type="AggregateType.Sum">
                                                <FooterTemplate>
                                                    @{ AggregateTemplateContext? AverageValue = (context as AggregateTemplateContext);
                                                    <div>
                                                        Total: @AverageValue.Sum
                                                    </div>
                                                    }
                                                </FooterTemplate>
                                            </GridAggregateColumn>
                                            <GridAggregateColumn Field="@nameof(Score.Percent)" Type="AggregateType.Custom">
                                                <FooterTemplate>
                                                    @{ 
                                                        int percent = GetWeightedAggregate();
                                                        <div id="myProgress" class="pbar">
                                                            <div id="myBar" style="width:@percent%" class="bar @(percent < 75 ? "progressdisable" : string.Empty)">
                                                                <div id="label" class="barlabel">@percent%</div>
                                                            </div>
                                                        </div>
                                                     } 
                                                </FooterTemplate>
                                            </GridAggregateColumn>
                                        </GridAggregateColumns>
                                    </GridAggregate>
                                </GridAggregates>
                                <GridColumns>
                                    <GridColumn Field="@nameof(Score.CategoryName)" HeaderText="Category" IsPrimaryKey="true" Width="200" ClipMode="ClipMode.EllipsisWithTooltip"></GridColumn>
                                    <GridColumn Field="@nameof(Score.Correct)" HeaderText="Correct" AllowFiltering="false" AllowSorting="false" Width="100"></GridColumn>
                                    <GridColumn Field="@nameof(Score.Total)" HeaderText="Total" AllowFiltering="false" AllowSorting="false" Width="100"></GridColumn>
                                    <GridColumn HeaderText="Proficiency" Field="@nameof(Score.Percent)" AllowFiltering="false" AllowSorting="false" Width="180">
                                        <Template>
                                            @{
                                                Score? score = (context as Score);
                                                <div id="myProgress" class="pbar">
                                                    <div id="myBar" style="width:@score.Percent%" class="bar @(score.Percent < 75 ? "progressdisable" : string.Empty)">
                                                        <div id="label" class="barlabel">@score.Percent%</div>
                                                    </div>
                                                </div>
                                            }
                                        </Template>
                                    </GridColumn>
                                </GridColumns>
                            </SfGrid>
                        </div>
                    </div>
                </div>
            </div>
        }
        else
        {
            <p>No scores yet.</p>
        }
    </CardContent>
    <CardFooter>
        <CardFooterContent>
            <SfButton CssClass="e-btn e-outline e-primary" @onclick="GoHome">Go Home</SfButton>
            <SfButton CssClass="e-btn e-outline e-primary" @onclick="ClearScores">Clear Scores</SfButton>
        </CardFooterContent>
    </CardFooter>
</SfCard>
<style>
    #myProgress {
        position: relative;
        height: 18px;
        width: 10em;
        text-align: left;
        background-color: white;
    }

    .highcontrast .e-grid #myProgress {
        background-color: black;
    }

    #myBar {
        position: absolute;
        width: 10%;
        height: 100%;
        background-color: #00b300;
    }

    #myBar.progressdisable {
        background-color: #df2222;
    }

    #label {
        position: relative;
        left: 10px;
        line-height: 18px;
        font-size: 10px;
        color: white;
    }

    .e-card-header-title {
        font-size: 40px !important;
        font-style: italic;
    }
</style>

@code {
    private List<Score> categoryScores = new();
    private IDisposable? registration;

    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();

        categoryScores = await LocalStorage.GetItemAsync<List<Score>>("scores") ?? new List<Score>();
    }

    protected override void OnAfterRender(bool firstRender)
    {
        if (firstRender)
        {
            registration = NavigationManager.RegisterLocationChangingHandler(OnLocationChanging);
        }
    }

    private ValueTask OnLocationChanging(LocationChangingContext context)
    {
        bool isGame = context.TargetLocation.Contains("/game");

        if (isGame)
        {
            context.PreventNavigation();
            this.GoHome();
        }
        else
        {
            registration?.Dispose();
        }

        return ValueTask.CompletedTask;
    }

    private int GetWeightedAggregate()
    {
        int totalCorrect = categoryScores.Sum(s => s.Correct);
        int totalTotal = categoryScores.Sum(s => s.Total);
        int totalPercent = (int)Math.Round((double)(100 * totalCorrect) / totalTotal);
        return totalPercent;
    }

    private void GoHome()
    {
        NavigationManager.NavigateTo("/");
    }

    private void ClearScores()
    {
        LocalStorage.ClearAsync();
        this.GoHome();
    }
}
